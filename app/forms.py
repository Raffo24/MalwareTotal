from django import forms 
from django.contrib.auth.models import User
from .models import  Minaccia, Topic, Analyzer

class FormSezione(forms.Form):
    nome = forms.CharField(required=True,widget=forms.TextInput(attrs={"class" : "form-control"}))
    content = forms.CharField(required=True,widget=forms.Textarea(attrs={"class" : "form-control"}))
    def clean(self):
        super().clean()
        for campo in self.fields.keys():
            optional = self.cleaned_data.get(campo)
            if optional == "" or optional == None:
                raise forms.ValidationError(f'Il campo "{campo}" non può essere vuoto!')
class FormTopic(forms.Form):
    nome = forms.CharField(required=True,widget=forms.TextInput(attrs={"class" : "form-control"}))
    content = forms.CharField(required=True,widget=forms.Textarea(attrs={"class" : "form-control"}))
    minaccia = forms.ModelChoiceField(required=True,queryset=Minaccia.objects.all(), initial=0)
    class Meta:
            model = Topic
            fields = ["nome", "content", "minaccia"]
    def clean(self):
        super().clean()
        for campo in self.fields.keys():
            optional = self.cleaned_data.get(campo)
            if optional == "" or optional == None:
                raise forms.ValidationError(f'Il campo "{campo}" non può essere vuoto!')
class FormRegistrazioneUser(forms.ModelForm):
    username = forms.CharField(required=True,widget=forms.TextInput(attrs={"class" : "form-control"}))
    email = forms.CharField(required=True,widget=forms.EmailInput(attrs={"class" : "form-control"}))
    password = forms.CharField(required=True,widget=forms.PasswordInput(attrs={"class" : "form-control"}))
    conferma_password = forms.CharField(required=True,widget=forms.PasswordInput(attrs={"class" : "form-control"}))
    nome = forms.CharField(required=True,widget=forms.TextInput(attrs={"class" : "form-control"}))
    cognome = forms.CharField(required=True,widget=forms.TextInput(attrs={"class" : "form-control"}))
    class Meta:
        model= User
        fields = ["username", "email", "password", "conferma_password", "nome", "cognome"]
    def clean(self):
        super().clean()
        for campo in self.fields.keys():
            optional = self.cleaned_data.get(campo)
            if optional == "" or optional == None:
                raise forms.ValidationError(f'Il campo "{campo}" non può essere vuoto!')
        password = self.cleaned_data.get("password")
        conferma_password = self.cleaned_data.get("conferma_password")
        if password != conferma_password:
            raise forms.ValidationError("Le password non combaciano!")
        return self.cleaned_data
    
class FormAnalisi(forms.Form):
    analyzer = forms.ModelChoiceField(required=True,queryset=Analyzer.objects.all(), initial=0)
    def clean(self):
        super().clean()
        for campo in self.fields.keys():
            optional = self.cleaned_data.get(campo)
            if optional == "" or optional == None:
                raise forms.ValidationError(f'Il campo "{campo}" non può essere vuoto!')

class FormCommento(forms.Form):
    commento = forms.CharField(required=True,widget=forms.Textarea(attrs={"class" : "form-control"}))
    def clean(self):
        super().clean()
        for campo in self.fields.keys():
            optional = self.cleaned_data.get(campo)
            if optional == "" or optional == None:
                raise forms.ValidationError(f'Il campo "{campo}" non può essere vuoto!')