from django.shortcuts import render, HttpResponse, HttpResponseRedirect 
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.contrib.auth import authenticate, login
import mimetypes
from django.contrib.auth.models import User
from django.contrib.auth.decorators import login_required
# Create your views here.
from .models import Cve, Datiutente, Produttore, Filestoanalisi, Conoscenza, Analyzer, Lang, Langanalyzer, Minaccia, Cve, Sezione, Topic, Reply, AuthUser, Analisi, Contenimento, Caricamento
from .forms import FormSezione, FormRegistrazioneUser, FormTopic, FormAnalisi, FormCommento
from django.core.files.storage import FileSystemStorage
import hashlib
import os
from .models import Files
import datetime
from django.contrib import messages

@login_required()
def simple_upload(request):
    if request.method == 'POST' and request.FILES['myfile']:
        myfile = request.FILES['myfile']
        fs = FileSystemStorage()
        filename = fs.save("files/" + myfile.name, myfile)
        pesoFile = os.path.getsize(filename)
        with open(filename,"rb") as f:
            f_byte= f.read()
            result = hashlib.sha256(f_byte)
            filehash = result.hexdigest()
        Files(fhash=filehash, nome=myfile.name, fdati=filename, peso=pesoFile, autore = request.user.id).save()
        Caricamento(request.user.id, filehash).save()
        return render(request, 'analisi.html', {
            'filehash': filehash,
            'filestoanalisi' : Filestoanalisi.objects.filter(files__autore=request.user)
        })
    return render(request, 'analisi.html',{'filestoanalisi' : Filestoanalisi.objects.filter(files__autore=request.user.id)})
def homepage(request):
    context = {"sezione" : Sezione.objects.all()}
    return render(request, "home.html", context)
def cve(request):
    all_cve = Cve.objects.all()
    page_number = request.GET.get('page')
    paginator = Paginator(all_cve, 50) # 10 items per page
    try:
        cves = paginator.page(page_number)
        # This can raise an error
    except PageNotAnInteger:
        # If the page number is not an integer
        # show the first page
        cves = paginator.page(1)
    except EmptyPage:
        # If the page number is out of range
        # show the last page
        cves = paginator.page(paginator.num_pages)
    return render(request, 'cve.html', {"cve" : cves})
@login_required()
def forum(request):
    if request.method == "POST":
        form = FormSezione(request.POST)
        if form.is_valid():
            print("il form è valido")
            try:
                newSez = Sezione(form.cleaned_data["nome"],form.cleaned_data["content"], request.user.id )
                newSez.save()
                return HttpResponse("<script>\
                    window.alert('La sezione è stata aggiunta con successo!');\
                    window.location.href = '/sezione/{0}';\
                    </script>".format(newSez.nome)
                )
            except User.DoesNotExist:
                return HttpResponse("<script>\
                    window.alert('Non è stato possibile aggiungere la sezione!');\
                    window.location.href = '/sezione/{0}';\
                    </script>".format(newSez.nome)
                )

    else:
        form = FormSezione()
    return render(request, "forum.html", {"sezione" : Sezione.objects.all(), "form" : form})

def malware(request):
    context = {"malware" : Minaccia.objects.all()}
    return render(request, "malware.html", context)
@login_required()
def sezione(request, pk):
    if request.method == "POST":
        form = FormTopic(request.POST)
        if form.is_valid():
            print("il form è valido")
            try:
                newTopic = Topic(
                    title = form.cleaned_data["nome"],
                    auth_user = AuthUser.objects.get(id=request.user.id),
                    sezione = Sezione.objects.get(pk=pk), 
                    content = form.cleaned_data["content"], 
                    minaccia = form.cleaned_data["minaccia"],
                    createtime = datetime.date.today(),
                    status = 1
                )
                newTopic.save()
                return HttpResponse(
                    "<script>\
                        window.alert('Il topic è stato aggiunto con successo!');\
                        window.location.href = '/topic/{0}';\
                    </script>".format(newTopic.id)
                )
            except User.DoesNotExist:
                return HttpResponse(
                    "<script>\
                        window.alert('Non è stato possibile aggiungere il topic!');\
                        window.location.href = '/topic/{0}';\
                    </script>".format(newTopic.id)
                )
    else:
        form = FormTopic()
    context = {"sezione" : Sezione.objects.get(pk=pk), "topics": Topic.objects.filter(sezione=pk), "form" : form}
    return render(request, "sezione.html", context)
@login_required()
def topic(request, pk):
    if request.method == "POST":
        form = FormCommento(request.POST)
        if form.is_valid():
            print("il form è valido")
            try:
                newReply = Reply(
                    auth_user = AuthUser.objects.get(id=request.user.id),
                    topic = Topic.objects.get(pk=pk), 
                    content = form.cleaned_data["commento"], 
                    posttime = datetime.date.today()
                )
                newReply.save()
                return HttpResponse(
                    "<script>\
                        window.alert('Il reply è stato aggiunto con successo!');\
                        window.location.href = '/topic/{0}';\
                    </script>".format(pk)
                )
            except User.DoesNotExist:
                return HttpResponse(
                    "<script>\
                        window.alert('Non è stato possibile aggiungere il reply!');\
                        window.location.href = '/topic/{0}';\
                    </script>".format(pk)
                )
    else:
        form = FormCommento()
    context = {"topic" : Topic.objects.get(pk=pk), "replies": Reply.objects.filter(topic=pk), "form" : form}
    return render(request, "topic.html", context)

@login_required()
def user(request):
    context = {
        "user" : request.user, 
        "data" : Datiutente.objects.get(auth_user = request.user.id), 
        "sezioni" : Sezione.objects.filter(auth_user = request.user.id), 
        "topics" : Topic.objects.filter(auth_user = request.user.id)
    }
    return render(request, "user.html", context)
@login_required()
def file(request, pk):
    newAnalisi = None
    if request.method == "POST":
        form = FormAnalisi(request.POST)
        if form.is_valid():
            print("il form è valido")
            try:
                newAnalisi = Analisi(analyzer = form.cleaned_data["analyzer"], datatime = datetime.datetime.now(), tipo = form.cleaned_data["analyzer"].type, output = "")
                newAnalisi.save()
                pathout = os.path.abspath(os.path.dirname(__file__)) + "/download/" + Files.objects.get(pk=pk).fhash + str(newAnalisi.id) + ".txt"
                f = open(pathout, "w")
                f.write("qui sono i risultati delle analisi del file...")
                f.close()
                newAnalisi.output = pathout
                newFilestoanalisi = Filestoanalisi(files = Files.objects.get(pk=pk), analisi = newAnalisi)
                newFilestoanalisi.save()
                if (pk in (c.minaccia.mhash for c in Conoscenza.objects.filter(analyzer=form.cleaned_data["analyzer"]))):
                    newContenimento = Contenimento(minaccia = Minaccia.objects.get(pk=pk), files = Files.objects.get(pk=pk))
                    newContenimento.save()
                return HttpResponse("<script>\
                    window.alert('La scansione è stata effettuata con successo!');\
                    window.location.href = '/file/{0}';\
                    </script>".format(pk)
                )
            except User.DoesNotExist:
                return HttpResponse("<script>\
                    window.alert('Non è stato possibile scannerizzare il file!');\
                    window.location.href = '/file/{0}';\
                    </script>".format(pk)
                )
    else:
        form = FormAnalisi()
    context = {
        "file" : Files.objects.get(fhash=pk), 
        "filestoanalisi" : Filestoanalisi.objects.filter(files=pk),
        "contenimento" : Contenimento.objects.filter(files=pk), 
        "form" : form, 
        "analyzers" : Analyzer.objects.all(), 
    }
    return render(request, "file.html", context)

def searchPageCve(request):
    srh = request.GET['query']
    ls = srh.split(" ")
    name_set = Cve.objects
    description_set = name_set
    for s in ls:
        name_set = name_set.filter(nome__icontains=s)
        description_set = description_set.filter(descrizione__icontains=s)
    
    context = {"search" : srh, "cve" : name_set.union(description_set)}
    
    return render(request, "cve.html", context)

def searchPageMalware(request):
    srh = request.GET['query']
    ls = srh.split(" ")
    name_set = Minaccia.objects
    categoria_set = name_set
    tipo_set = name_set
    hash_set = name_set
    for s in ls:
        name_set = name_set.filter(nome__icontains=s)
        tipo_set = tipo_set.filter(tipo__icontains=s)
        hash_set = hash_set.filter(mhash__icontains=s)
        categoria_set = categoria_set.filter(categoria__icontains=s)
    context = {"search" : srh, "malware" : name_set.union(categoria_set).union(tipo_set).union(hash_set)}
    return render(request, "malware.html", context)

def registrazione(request):
    if request.method == "POST":
        form = FormRegistrazioneUser(request.POST)
        if form.is_valid():
            username = form.cleaned_data.get("username")
            email = form.cleaned_data.get("email")
            password = form.cleaned_data.get("password")
            User.objects.create_user(
                username = username,
                password = password,
                email = email,
                first_name = form.cleaned_data.get("nome"),
                last_name = form.cleaned_data.get("cognome")
            )
            Datiutente(
                auth_user = AuthUser.objects.get(username = form.cleaned_data.get("username")),
                points = 100
            ).save()
              
            user = authenticate(username= username, password= password)
            login(request, user)
            return HttpResponseRedirect("/")
    else:
        form = FormRegistrazioneUser()
    return render(request, "registration/registrazione.html", {'form' : form})

def download_file(request, filepath=''):
    if filepath != '':
        filepath = os.path.abspath(os.path.dirname(__file__)) + "/download/" + filepath
        path = open(filepath, 'r')
        mime_type, _ = mimetypes.guess_type(filepath)
        response = HttpResponse(path, content_type=mime_type)
        response['Content-Disposition'] = "attachment; filepath=%s" % filepath
        return response
    else:
        return render(request, 'file.html')