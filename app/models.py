# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class Analisi(models.Model):
    analyzer = models.ForeignKey('Analyzer', models.DO_NOTHING, db_column='analyzer')
    datatime = models.DateField()
    tipo = models.CharField(max_length=10)
    output = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'analisi'


class Analyzer(models.Model):
    nome = models.CharField(max_length=30)
    version = models.CharField(max_length=20)
    produttore = models.ForeignKey('Produttore', models.DO_NOTHING, db_column='produttore')
    type = models.CharField(max_length=20)

    class Meta:
        managed = False
        db_table = 'analyzer'
    def __str__(self):
        return u'{0}'.format(self.nome)

class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.IntegerField()
    username = models.CharField(unique=True, max_length=150,null=False)
    first_name = models.CharField(max_length=150)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.IntegerField()
    is_active = models.IntegerField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class Caricamento(models.Model):
    auth_user = models.OneToOneField(AuthUser, models.DO_NOTHING, db_column='auth_user')
    files = models.ForeignKey('Files', models.DO_NOTHING, db_column='files', primary_key=True)

    class Meta:
        managed = False
        db_table = 'caricamento'
        unique_together = (('auth_user', 'files'),)


class Conoscenza(models.Model):
    minaccia = models.OneToOneField('Minaccia', models.DO_NOTHING, db_column='minaccia', primary_key=True)
    analyzer = models.ForeignKey(Analyzer, models.DO_NOTHING, db_column='analyzer')

    class Meta:
        managed = False
        db_table = 'conoscenza'
        unique_together = (('minaccia', 'analyzer'),)


class Contenimento(models.Model):
    minaccia = models.OneToOneField('Minaccia', models.DO_NOTHING, db_column='minaccia', primary_key=True)
    files = models.ForeignKey('Files', models.DO_NOTHING, db_column='files')

    class Meta:
        managed = False
        db_table = 'contenimento'
        unique_together = (('minaccia', 'files'),)


class Cve(models.Model):
    nome = models.CharField(primary_key=True, max_length=30)
    descrizione = models.TextField()
    anno = models.TextField()  # This field type is a guess.

    class Meta:
        managed = False
        db_table = 'cve'


class Datiutente(models.Model):
    auth_user = models.OneToOneField(AuthUser, models.DO_NOTHING, db_column='auth_user', primary_key=True)
    points = models.IntegerField()
    class Meta:
        managed = False
        db_table = 'datiutente'


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.PositiveSmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    id = models.BigAutoField(primary_key=True)
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class Exploitation(models.Model):
    minaccia = models.OneToOneField('Minaccia', models.DO_NOTHING, db_column='minaccia', primary_key=True)
    cve = models.ForeignKey(Cve, models.DO_NOTHING, db_column='cve')

    class Meta:
        managed = False
        db_table = 'exploitation'
        unique_together = (('minaccia', 'cve'),)


class Files(models.Model):
    fhash = models.CharField(primary_key=True, max_length=100)
    nome = models.CharField(max_length=500)
    fdati = models.TextField()
    peso = models.IntegerField()
    autore = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'files'


class Filestoanalisi(models.Model):
    files = models.OneToOneField(Files, models.DO_NOTHING, db_column='files', primary_key = True)
    analisi = models.ForeignKey(Analisi, models.DO_NOTHING, db_column='analisi')

    class Meta:
        managed = False
        db_table = 'filestoanalisi'
        unique_together = (('files', 'analisi'),)


class Lang(models.Model):
    nome = models.CharField(primary_key=True, max_length=30)

    class Meta:
        managed = False
        db_table = 'lang'


class Langanalyzer(models.Model):
    analyzer = models.OneToOneField(Analyzer, models.DO_NOTHING, db_column='analyzer', primary_key=True)
    lang = models.ForeignKey(Lang, models.DO_NOTHING, db_column='lang')

    class Meta:
        managed = False
        db_table = 'langanalyzer'
        unique_together = (('analyzer', 'lang'),)


class Minaccia(models.Model):
    mhash = models.CharField(primary_key=True, max_length=100)
    nome = models.CharField(max_length=30)
    categoria = models.CharField(max_length=30)
    tipo = models.CharField(max_length=20)

    class Meta:
        managed = False
        db_table = 'minaccia'
    def __str__(self):
        return u'{0}'.format(self.nome)

class Produttore(models.Model):
    nome = models.CharField(max_length=30)
    nazione = models.CharField(max_length=50)

    class Meta:
        managed = False
        db_table = 'produttore'


class Refcve(models.Model):
    cve = models.OneToOneField(Cve, models.DO_NOTHING, db_column='cve', primary_key=True)
    ref = models.CharField(max_length=400)

    class Meta:
        managed = False
        db_table = 'refcve'
        unique_together = (('cve', 'ref'),)


class Reply(models.Model):
    topic = models.ForeignKey('Topic', models.DO_NOTHING, db_column='topic')
    auth_user = models.ForeignKey(AuthUser, models.DO_NOTHING, db_column='auth_user')
    content = models.TextField()
    posttime = models.DateField(db_column='postTime')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'reply'


class Sezione(models.Model):
    nome = models.CharField(primary_key=True, max_length=30)
    content = models.TextField()
    auth_user = models.ForeignKey(AuthUser, models.DO_NOTHING, db_column='auth_user')

    class Meta:
        managed = False
        db_table = 'sezione'


class Topic(models.Model):
    title = models.CharField(max_length=50)
    auth_user = models.ForeignKey(AuthUser, models.DO_NOTHING, db_column='auth_user')
    sezione = models.ForeignKey(Sezione, models.DO_NOTHING, db_column='sezione')
    createtime = models.DateField(db_column='createTime')  # Field name made lowercase.
    status = models.IntegerField()
    content = models.TextField()
    minaccia = models.ForeignKey(Minaccia, models.DO_NOTHING, db_column='minaccia')

    class Meta:
        managed = False
        db_table = 'topic'