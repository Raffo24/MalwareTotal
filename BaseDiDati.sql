create database malwareTotal;
use MalwareTotal;

create table Auth_user(
	id Integer primary key auto_increment,
    username varchar(40) not null,
    password varchar(100) not null,
    first_name varchar(100) not null,
    last_name varchar(100) not null,
    is_superuser tinyint(1) not null,
    is_staff tinyint(1) not null,
    is_active tinyint(1) not null,
    date_joined datetime not null,
    last_login datetime not null
);

create table Produttore(
	id Integer primary key auto_increment,
    nome varchar(30) not null,
    nazione varchar(50) not null
);
create table Lang(
	id integer primary key auto_increment,
	nome varchar(30) not null,
    version varchar(20) not null,
    descrizione longtext not null
);
create table Files(
	fhash varchar(100) primary key,
    nome varchar(500) not null,
    fdati blob not null,
    peso integer not null,
    autore varchar(50)
);
create table Analyzer(
	id Integer primary key auto_increment,
	nome varchar(30) not null,
    version varchar(20) not null,
    produttore Integer not null,
    type varchar(20) not null,
    foreign key (produttore) references  Produttore(id)
);
create table LangAnalyzer(
	 analyzer Integer not null,
	 lang integer not null,
     foreign key (analyzer) references Analyzer(id),
     foreign key (lang) references Lang(id),
     primary key (analyzer, lang)
);
create table Minaccia(
	mhash varchar(100) primary key,
    nome varchar(30) not null,
    categoria varchar(30) not null,
    tipo varchar(20) not null
);
create table Conoscenza(
	minaccia varchar(100)  not null,
    analyzer Integer not null,
    foreign key (minaccia) references Minaccia(mhash),
    foreign key (analyzer) references Analyzer(id),
    primary key (minaccia, analyzer)
);
create table CVE(
	nome varchar(30) primary key,
    descrizione longtext not null,
    anno year not null
);
create table RefCVE(
	cve varchar(30) not null,
    ref varchar(400) not null,
    foreign key (cve) references CVE(nome),
    primary key (cve, ref)
);
create table Contenimento(
	minaccia varchar(100)  not null,
    files varchar(200) not null,
    foreign key (minaccia) references Minaccia(mhash),
    foreign key (files) references Files(fhash),
    primary key (minaccia, files)
);
create table Exploitation(
	minaccia varchar(100)  not null,
    cve varchar(30) not null,
    foreign key (minaccia) references Minaccia(mhash),
    foreign key (cve) references CVE(nome),
    primary key (minaccia, cve)
);

create table Analisi(
	id Integer primary key auto_increment,
    analyzer Integer not null,
    datatime date not null,
    tipo varchar(10) not null,
    output blob,
    foreign key (analyzer) references Analyzer(id)
);

create table filesToAnalisi(
	files varchar(100) not null,
    analisi Integer not null,
    foreign key (files) references Files(fhash),
    foreign key (analisi) references Analisi(id),
    primary key (files, analisi)
);

create table DatiUtente(
	auth_user Integer primary key,
    points Integer not null,
    foreign key (auth_user) references Auth_user(id)
);

create table Caricamento(
	auth_user Integer not null,
    files varchar(100) not null,
    foreign key (auth_user) references auth_user(id),
    foreign key (files) references Files(fhash),
    primary key (auth_user, files)
);

create table Sezione(
	nome varchar(30) primary key,
    content longtext not null,
    auth_user Integer not null,
	foreign key (auth_user) references auth_user(id)
);

create table Topic(
	id Integer primary key auto_increment,
	title varchar(50) not null,
    auth_user Integer not null,
    sezione varchar(30) not null,
    createTime date not null,
    status boolean not null,
    content longtext not null,
    minaccia varchar(100)  not null,
    foreign key (minaccia) references Minaccia(mhash),
    foreign key (sezione) references Sezione(nome),
	foreign key (auth_user) references auth_user(id)
);

create table Reply(
	id Integer primary key auto_increment,
    topic Integer not null,
    auth_user Integer not null,
    content longtext not null,
    postTime date not null,
    foreign key (topic) references Topic(id),
    foreign key (auth_user) references auth_user(id)
);


DELIMITER $$
USE `malwaretotal`$$
CREATE DEFINER=`root`@`localhost` TRIGGER `auth_user_BEFORE_INSERT` BEFORE INSERT ON `auth_user` FOR EACH ROW BEGIN
	if (new.is_superuser = 1 and new.is_staff = 0) then
		SIGNAL sqlstate '45001' set message_text = "Un account superuser deve anche essere staff!";
    end if;
END$$
DELIMITER ;

DELIMITER $$
USE `malwaretotal`$$
CREATE DEFINER=`root`@`localhost` TRIGGER `caricamento_BEFORE_INSERT` BEFORE INSERT ON `caricamento` FOR EACH ROW BEGIN
	if  
		(
		select count(*) 
		from caricamento c 
		where NEW.auth_user = c.auth_user ) > 10 and (
			select au.is_superuser
			from auth_user au
			where au.id = NEW.auth_user
		) = 0  then
			SIGNAL sqlstate '45001' set message_text = "Un utente non admin non può caricare più di 10 file!";
    end if;
END$$
DELIMITER ;

DELIMITER $$
USE `malwaretotal`$$
CREATE DEFINER=`root`@`localhost` TRIGGER `datiutente_BEFORE_INSERT` BEFORE INSERT ON `datiutente` FOR EACH ROW BEGIN
	if (NEW.points < 1000 and (select is_superuser from auth_user where id = NEW.auth_user) = 1) then
		SIGNAL sqlstate '45001' set message_text = "Un account superuser deve avere più di 1000 punti!";
    end if;
END$$
DELIMITER ;

DELIMITER $$
USE `malwaretotal`$$
CREATE DEFINER=`root`@`localhost` TRIGGER `sezione_BEFORE_INSERT` BEFORE INSERT ON `sezione` FOR EACH ROW BEGIN
	if (NEW.auth_user in (select au.id from auth_user au where au.is_superuser = 0 )) then
		SIGNAL sqlstate '45001' set message_text = "Una sezione può essere aperta solo da un utente admin";
    end if;
END$$
DELIMITER ;

DELIMITER $$
USE `malwaretotal`$$
CREATE DEFINER=`root`@`localhost` TRIGGER `topic_BEFORE_INSERT` BEFORE INSERT ON `topic` FOR EACH ROW BEGIN
	if (new.auth_user in (select du.auth_user from datiutente du where du.points < 1000 )) then
		SIGNAL sqlstate '45001' set message_text = "Un topic può essere aperto solo da un utente con almeno 1000 punti";
    end if;
END$$
DELIMITER ;





